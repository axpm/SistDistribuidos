/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _STORAGE_H_RPCGEN
#define _STORAGE_H_RPCGEN

#include <rpc/rpc.h>

#include <pthread.h>

#ifdef __cplusplus
extern "C" {
#endif


struct list {
	struct {
		u_int file_len;
		char *file_val;
	} file;
	struct list *next;
};
typedef struct list list;

typedef list *t_list;

struct listUsers {
	struct {
		u_int user_len;
		char *user_val;
	} user;
	struct {
		u_int ip_len;
		char *ip_val;
	} ip;
	struct {
		u_int port_len;
		char *port_val;
	} port;
	struct listUsers *next;
};
typedef struct listUsers listUsers;

typedef listUsers *t_listUsers;

struct publish_1_argument {
	char *user;
	char *file;
	char *desc;
};
typedef struct publish_1_argument publish_1_argument;

struct deletecontent_1_argument {
	char *user;
	char *file;
};
typedef struct deletecontent_1_argument deletecontent_1_argument;

struct connectuser_1_argument {
	char *user;
	char *ip;
	char *port;
};
typedef struct connectuser_1_argument connectuser_1_argument;

struct check_list_content_1_argument {
	char *user;
	char *userTarget;
};
typedef struct check_list_content_1_argument check_list_content_1_argument;

struct list_content_1_argument {
	int n;
	char *userTarget;
};
typedef struct list_content_1_argument list_content_1_argument;

#define STORAGE 99
#define STORAGEVER 1

#if defined(__STDC__) || defined(__cplusplus)
#define registerUser 1
extern  enum clnt_stat registeruser_1(char *, int *, CLIENT *);
extern  bool_t registeruser_1_svc(char *, int *, struct svc_req *);
#define unregisterUser 2
extern  enum clnt_stat unregisteruser_1(char *, int *, CLIENT *);
extern  bool_t unregisteruser_1_svc(char *, int *, struct svc_req *);
#define publish 3
extern  enum clnt_stat publish_1(char *, char *, char *, int *, CLIENT *);
extern  bool_t publish_1_svc(char *, char *, char *, int *, struct svc_req *);
#define deleteContent 4
extern  enum clnt_stat deletecontent_1(char *, char *, int *, CLIENT *);
extern  bool_t deletecontent_1_svc(char *, char *, int *, struct svc_req *);
#define connectUser 5
extern  enum clnt_stat connectuser_1(char *, char *, char *, int *, CLIENT *);
extern  bool_t connectuser_1_svc(char *, char *, char *, int *, struct svc_req *);
#define disconnectUser 6
extern  enum clnt_stat disconnectuser_1(char *, int *, CLIENT *);
extern  bool_t disconnectuser_1_svc(char *, int *, struct svc_req *);
#define check_list_users 7
extern  enum clnt_stat check_list_users_1(char *, int *, CLIENT *);
extern  bool_t check_list_users_1_svc(char *, int *, struct svc_req *);
#define list_users 8
extern  enum clnt_stat list_users_1(int , t_listUsers *, CLIENT *);
extern  bool_t list_users_1_svc(int , t_listUsers *, struct svc_req *);
#define check_list_content 9
extern  enum clnt_stat check_list_content_1(char *, char *, int *, CLIENT *);
extern  bool_t check_list_content_1_svc(char *, char *, int *, struct svc_req *);
#define list_content 10
extern  enum clnt_stat list_content_1(int , char *, t_list *, CLIENT *);
extern  bool_t list_content_1_svc(int , char *, t_list *, struct svc_req *);
extern int storage_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define registerUser 1
extern  enum clnt_stat registeruser_1();
extern  bool_t registeruser_1_svc();
#define unregisterUser 2
extern  enum clnt_stat unregisteruser_1();
extern  bool_t unregisteruser_1_svc();
#define publish 3
extern  enum clnt_stat publish_1();
extern  bool_t publish_1_svc();
#define deleteContent 4
extern  enum clnt_stat deletecontent_1();
extern  bool_t deletecontent_1_svc();
#define connectUser 5
extern  enum clnt_stat connectuser_1();
extern  bool_t connectuser_1_svc();
#define disconnectUser 6
extern  enum clnt_stat disconnectuser_1();
extern  bool_t disconnectuser_1_svc();
#define check_list_users 7
extern  enum clnt_stat check_list_users_1();
extern  bool_t check_list_users_1_svc();
#define list_users 8
extern  enum clnt_stat list_users_1();
extern  bool_t list_users_1_svc();
#define check_list_content 9
extern  enum clnt_stat check_list_content_1();
extern  bool_t check_list_content_1_svc();
#define list_content 10
extern  enum clnt_stat list_content_1();
extern  bool_t list_content_1_svc();
extern int storage_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_list (XDR *, list*);
extern  bool_t xdr_t_list (XDR *, t_list*);
extern  bool_t xdr_listUsers (XDR *, listUsers*);
extern  bool_t xdr_t_listUsers (XDR *, t_listUsers*);
extern  bool_t xdr_publish_1_argument (XDR *, publish_1_argument*);
extern  bool_t xdr_deletecontent_1_argument (XDR *, deletecontent_1_argument*);
extern  bool_t xdr_connectuser_1_argument (XDR *, connectuser_1_argument*);
extern  bool_t xdr_check_list_content_1_argument (XDR *, check_list_content_1_argument*);
extern  bool_t xdr_list_content_1_argument (XDR *, list_content_1_argument*);

#else /* K&R C */
extern bool_t xdr_list ();
extern bool_t xdr_t_list ();
extern bool_t xdr_listUsers ();
extern bool_t xdr_t_listUsers ();
extern bool_t xdr_publish_1_argument ();
extern bool_t xdr_deletecontent_1_argument ();
extern bool_t xdr_connectuser_1_argument ();
extern bool_t xdr_check_list_content_1_argument ();
extern bool_t xdr_list_content_1_argument ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_STORAGE_H_RPCGEN */
